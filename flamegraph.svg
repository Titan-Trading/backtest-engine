<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="4626"><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="0.0000%" y="229" width="0.0216%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (1 samples, 0.02%)</title><rect x="0.0216%" y="229" width="0.0216%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2716%" y="239.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_unlock (1 samples, 0.02%)</title><rect x="0.0432%" y="229" width="0.0216%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.2932%" y="239.50"></text></g><g><title>st-backtester-2`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="0.0649%" y="229" width="0.0216%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.3149%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (5 samples, 0.11%)</title><rect x="0.3243%" y="213" width="0.1081%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="5"/><text x="0.5743%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.06%)</title><rect x="0.4323%" y="213" width="0.0649%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="3"/><text x="0.6823%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.15%)</title><rect x="0.4972%" y="213" width="0.1513%" height="15" fill="rgb(207,160,47)" fg:x="23" fg:w="7"/><text x="0.7472%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.13%)</title><rect x="0.5188%" y="197" width="0.1297%" height="15" fill="rgb(228,23,34)" fg:x="24" fg:w="6"/><text x="0.7688%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (6 samples, 0.13%)</title><rect x="0.5188%" y="181" width="0.1297%" height="15" fill="rgb(218,30,26)" fg:x="24" fg:w="6"/><text x="0.7688%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (3 samples, 0.06%)</title><rect x="0.5837%" y="165" width="0.0649%" height="15" fill="rgb(220,122,19)" fg:x="27" fg:w="3"/><text x="0.8337%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.09%)</title><rect x="0.7350%" y="197" width="0.0865%" height="15" fill="rgb(250,228,42)" fg:x="34" fg:w="4"/><text x="0.9850%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.32%)</title><rect x="0.6485%" y="213" width="0.3243%" height="15" fill="rgb(240,193,28)" fg:x="30" fg:w="15"/><text x="0.8985%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.15%)</title><rect x="0.8214%" y="197" width="0.1513%" height="15" fill="rgb(216,20,37)" fg:x="38" fg:w="7"/><text x="1.0714%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.11%)</title><rect x="0.8647%" y="181" width="0.1081%" height="15" fill="rgb(206,188,39)" fg:x="40" fg:w="5"/><text x="1.1147%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (6 samples, 0.13%)</title><rect x="0.9728%" y="213" width="0.1297%" height="15" fill="rgb(217,207,13)" fg:x="45" fg:w="6"/><text x="1.2228%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (6 samples, 0.13%)</title><rect x="0.9728%" y="197" width="0.1297%" height="15" fill="rgb(231,73,38)" fg:x="45" fg:w="6"/><text x="1.2228%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (6 samples, 0.13%)</title><rect x="0.9728%" y="181" width="0.1297%" height="15" fill="rgb(225,20,46)" fg:x="45" fg:w="6"/><text x="1.2228%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (11 samples, 0.24%)</title><rect x="1.4051%" y="197" width="0.2378%" height="15" fill="rgb(210,31,41)" fg:x="65" fg:w="11"/><text x="1.6551%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="1.6429%" y="197" width="0.0216%" height="15" fill="rgb(221,200,47)" fg:x="76" fg:w="1"/><text x="1.8929%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.13%)</title><rect x="1.9023%" y="181" width="0.1297%" height="15" fill="rgb(226,26,5)" fg:x="88" fg:w="6"/><text x="2.1523%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (13 samples, 0.28%)</title><rect x="2.0320%" y="181" width="0.2810%" height="15" fill="rgb(249,33,26)" fg:x="94" fg:w="13"/><text x="2.2820%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (31 samples, 0.67%)</title><rect x="1.6645%" y="197" width="0.6701%" height="15" fill="rgb(235,183,28)" fg:x="77" fg:w="31"/><text x="1.9145%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.02%)</title><rect x="2.3130%" y="181" width="0.0216%" height="15" fill="rgb(221,5,38)" fg:x="107" fg:w="1"/><text x="2.5630%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="2.3130%" y="165" width="0.0216%" height="15" fill="rgb(247,18,42)" fg:x="107" fg:w="1"/><text x="2.5630%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (59 samples, 1.28%)</title><rect x="1.1025%" y="213" width="1.2754%" height="15" fill="rgb(241,131,45)" fg:x="51" fg:w="59"/><text x="1.3525%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (2 samples, 0.04%)</title><rect x="2.3346%" y="197" width="0.0432%" height="15" fill="rgb(249,31,29)" fg:x="108" fg:w="2"/><text x="2.5846%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (2 samples, 0.04%)</title><rect x="2.3779%" y="213" width="0.0432%" height="15" fill="rgb(225,111,53)" fg:x="110" fg:w="2"/><text x="2.6279%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (2 samples, 0.04%)</title><rect x="2.4211%" y="213" width="0.0432%" height="15" fill="rgb(238,160,17)" fg:x="112" fg:w="2"/><text x="2.6711%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="2.4643%" y="213" width="0.0216%" height="15" fill="rgb(214,148,48)" fg:x="114" fg:w="1"/><text x="2.7143%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="2.4859%" y="213" width="0.0649%" height="15" fill="rgb(232,36,49)" fg:x="115" fg:w="3"/><text x="2.7359%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (1 samples, 0.02%)</title><rect x="2.5508%" y="213" width="0.0216%" height="15" fill="rgb(209,103,24)" fg:x="118" fg:w="1"/><text x="2.8008%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="2.5724%" y="213" width="0.0216%" height="15" fill="rgb(229,88,8)" fg:x="119" fg:w="1"/><text x="2.8224%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (48 samples, 1.04%)</title><rect x="3.7397%" y="181" width="1.0376%" height="15" fill="rgb(213,181,19)" fg:x="173" fg:w="48"/><text x="3.9897%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (71 samples, 1.53%)</title><rect x="3.2642%" y="197" width="1.5348%" height="15" fill="rgb(254,191,54)" fg:x="151" fg:w="71"/><text x="3.5142%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="4.7773%" y="181" width="0.0216%" height="15" fill="rgb(241,83,37)" fg:x="221" fg:w="1"/><text x="5.0273%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (15 samples, 0.32%)</title><rect x="4.7990%" y="197" width="0.3243%" height="15" fill="rgb(233,36,39)" fg:x="222" fg:w="15"/><text x="5.0490%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (66 samples, 1.43%)</title><rect x="5.1232%" y="197" width="1.4267%" height="15" fill="rgb(226,3,54)" fg:x="237" fg:w="66"/><text x="5.3732%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (10 samples, 0.22%)</title><rect x="6.3338%" y="181" width="0.2162%" height="15" fill="rgb(245,192,40)" fg:x="293" fg:w="10"/><text x="6.5838%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.22%)</title><rect x="6.3338%" y="165" width="0.2162%" height="15" fill="rgb(238,167,29)" fg:x="293" fg:w="10"/><text x="6.5838%" y="175.50"></text></g><g><title>st-backtester-2`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (185 samples, 4.00%)</title><rect x="2.5940%" y="213" width="3.9991%" height="15" fill="rgb(232,182,51)" fg:x="120" fg:w="185"/><text x="2.8440%" y="223.50">st-b..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.04%)</title><rect x="6.5499%" y="197" width="0.0432%" height="15" fill="rgb(231,60,39)" fg:x="303" fg:w="2"/><text x="6.7999%" y="207.50"></text></g><g><title>st-backtester-2`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="6.5932%" y="213" width="0.0216%" height="15" fill="rgb(208,69,12)" fg:x="305" fg:w="1"/><text x="6.8432%" y="223.50"></text></g><g><title>st-backtester-2`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="6.5932%" y="197" width="0.0216%" height="15" fill="rgb(235,93,37)" fg:x="305" fg:w="1"/><text x="6.8432%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="6.6148%" y="197" width="0.0216%" height="15" fill="rgb(213,116,39)" fg:x="306" fg:w="1"/><text x="6.8648%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.02%)</title><rect x="6.6148%" y="181" width="0.0216%" height="15" fill="rgb(222,207,29)" fg:x="306" fg:w="1"/><text x="6.8648%" y="191.50"></text></g><g><title>st-backtester-2`core::ptr::drop_in_place&lt;st_backtester_2::database::models::query_result::QueryResult&gt; (4 samples, 0.09%)</title><rect x="6.6148%" y="213" width="0.0865%" height="15" fill="rgb(206,96,30)" fg:x="306" fg:w="4"/><text x="6.8648%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (3 samples, 0.06%)</title><rect x="6.6364%" y="197" width="0.0649%" height="15" fill="rgb(218,138,4)" fg:x="307" fg:w="3"/><text x="6.8864%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.02%)</title><rect x="20.5577%" y="197" width="0.0216%" height="15" fill="rgb(250,191,14)" fg:x="951" fg:w="1"/><text x="20.8077%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (242 samples, 5.23%)</title><rect x="20.5793%" y="197" width="5.2313%" height="15" fill="rgb(239,60,40)" fg:x="952" fg:w="242"/><text x="20.8293%" y="207.50">libsys..</text></g><g><title>libsystem_pthread.dylib`cthread_yield (5 samples, 0.11%)</title><rect x="25.8106%" y="197" width="0.1081%" height="15" fill="rgb(206,27,48)" fg:x="1194" fg:w="5"/><text x="26.0606%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="25.9403%" y="181" width="0.0216%" height="15" fill="rgb(225,35,8)" fg:x="1200" fg:w="1"/><text x="26.1903%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (1 samples, 0.02%)</title><rect x="25.9620%" y="181" width="0.0216%" height="15" fill="rgb(250,213,24)" fg:x="1201" fg:w="1"/><text x="26.2120%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.04%)</title><rect x="25.9836%" y="181" width="0.0432%" height="15" fill="rgb(247,123,22)" fg:x="1202" fg:w="2"/><text x="26.2336%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="26.0268%" y="181" width="0.0216%" height="15" fill="rgb(231,138,38)" fg:x="1204" fg:w="1"/><text x="26.2768%" y="191.50"></text></g><g><title>st-backtester-2`DYLD-STUB$$sched_yield (1 samples, 0.02%)</title><rect x="26.0484%" y="181" width="0.0216%" height="15" fill="rgb(231,145,46)" fg:x="1205" fg:w="1"/><text x="26.2984%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.02%)</title><rect x="32.2093%" y="165" width="0.0216%" height="15" fill="rgb(251,118,11)" fg:x="1490" fg:w="1"/><text x="32.4593%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (126 samples, 2.72%)</title><rect x="32.2309%" y="165" width="2.7237%" height="15" fill="rgb(217,147,25)" fg:x="1491" fg:w="126"/><text x="32.4809%" y="175.50">li..</text></g><g><title>st-backtester-2`crossbeam_channel::context::Context::wait_until (413 samples, 8.93%)</title><rect x="26.0700%" y="181" width="8.9278%" height="15" fill="rgb(247,81,37)" fg:x="1206" fg:w="413"/><text x="26.3200%" y="191.50">st-backtester..</text></g><g><title>libsystem_pthread.dylib`cthread_yield (2 samples, 0.04%)</title><rect x="34.9546%" y="165" width="0.0432%" height="15" fill="rgb(209,12,38)" fg:x="1617" fg:w="2"/><text x="35.2046%" y="175.50"></text></g><g><title>st-backtester-2`crossbeam_channel::waker::SyncWaker::register (2 samples, 0.04%)</title><rect x="34.9978%" y="181" width="0.0432%" height="15" fill="rgb(227,1,9)" fg:x="1619" fg:w="2"/><text x="35.2478%" y="191.50"></text></g><g><title>dyld`start (1,622 samples, 35.06%)</title><rect x="0.0000%" y="277" width="35.0627%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="1622"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>st-backtester-2`main (1,622 samples, 35.06%)</title><rect x="0.0000%" y="261" width="35.0627%" height="15" fill="rgb(221,10,30)" fg:x="0" fg:w="1622"/><text x="0.2500%" y="271.50">st-backtester-2`main</text></g><g><title>st-backtester-2`std::sys_common::backtrace::__rust_begin_short_backtrace (1,622 samples, 35.06%)</title><rect x="0.0000%" y="245" width="35.0627%" height="15" fill="rgb(210,229,1)" fg:x="0" fg:w="1622"/><text x="0.2500%" y="255.50">st-backtester-2`std::sys_common::backtrace::__rust_begin_..</text></g><g><title>st-backtester-2`st_backtester_2::main (1,618 samples, 34.98%)</title><rect x="0.0865%" y="229" width="34.9762%" height="15" fill="rgb(222,148,37)" fg:x="4" fg:w="1618"/><text x="0.3365%" y="239.50">st-backtester-2`st_backtester_2::main</text></g><g><title>st-backtester-2`crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (1,312 samples, 28.36%)</title><rect x="6.7013%" y="213" width="28.3614%" height="15" fill="rgb(234,67,33)" fg:x="310" fg:w="1312"/><text x="6.9513%" y="223.50">st-backtester-2`crossbeam_channel::flavors::li..</text></g><g><title>st-backtester-2`crossbeam_channel::context::Context::with::_{{closure}} (423 samples, 9.14%)</title><rect x="25.9187%" y="197" width="9.1440%" height="15" fill="rgb(247,98,35)" fg:x="1199" fg:w="423"/><text x="26.1687%" y="207.50">st-backtester..</text></g><g><title>st-backtester-2`crossbeam_channel::waker::SyncWaker::unregister (1 samples, 0.02%)</title><rect x="35.0411%" y="181" width="0.0216%" height="15" fill="rgb(247,138,52)" fg:x="1621" fg:w="1"/><text x="35.2911%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="35.0411%" y="165" width="0.0216%" height="15" fill="rgb(213,79,30)" fg:x="1621" fg:w="1"/><text x="35.2911%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.04%)</title><rect x="35.0627%" y="277" width="0.0432%" height="15" fill="rgb(246,177,23)" fg:x="1622" fg:w="2"/><text x="35.3127%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (4 samples, 0.09%)</title><rect x="35.1492%" y="197" width="0.0865%" height="15" fill="rgb(230,62,27)" fg:x="1626" fg:w="4"/><text x="35.3992%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`calloc (1 samples, 0.02%)</title><rect x="35.2356%" y="197" width="0.0216%" height="15" fill="rgb(216,154,8)" fg:x="1630" fg:w="1"/><text x="35.4856%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="35.2572%" y="197" width="0.0432%" height="15" fill="rgb(244,35,45)" fg:x="1631" fg:w="2"/><text x="35.5072%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (1 samples, 0.02%)</title><rect x="35.3005%" y="197" width="0.0216%" height="15" fill="rgb(251,115,12)" fg:x="1633" fg:w="1"/><text x="35.5505%" y="207.50"></text></g><g><title>st-backtester-2`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (3 samples, 0.06%)</title><rect x="35.3221%" y="197" width="0.0649%" height="15" fill="rgb(240,54,50)" fg:x="1634" fg:w="3"/><text x="35.5721%" y="207.50"></text></g><g><title>st-backtester-2`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="35.3869%" y="197" width="0.0216%" height="15" fill="rgb(233,84,52)" fg:x="1637" fg:w="1"/><text x="35.6369%" y="207.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.11%)</title><rect x="36.8785%" y="181" width="0.1081%" height="15" fill="rgb(207,117,47)" fg:x="1706" fg:w="5"/><text x="37.1285%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__lseek (1 samples, 0.02%)</title><rect x="36.9866%" y="181" width="0.0216%" height="15" fill="rgb(249,43,39)" fg:x="1711" fg:w="1"/><text x="37.2366%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (183 samples, 3.96%)</title><rect x="37.0082%" y="181" width="3.9559%" height="15" fill="rgb(209,38,44)" fg:x="1712" fg:w="183"/><text x="37.2582%" y="191.50">libs..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="40.9641%" y="181" width="0.0216%" height="15" fill="rgb(236,212,23)" fg:x="1895" fg:w="1"/><text x="41.2141%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.06%)</title><rect x="40.9857%" y="181" width="0.0649%" height="15" fill="rgb(242,79,21)" fg:x="1896" fg:w="3"/><text x="41.2357%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.63%)</title><rect x="41.0506%" y="181" width="0.6269%" height="15" fill="rgb(211,96,35)" fg:x="1899" fg:w="29"/><text x="41.3006%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (16 samples, 0.35%)</title><rect x="41.3316%" y="165" width="0.3459%" height="15" fill="rgb(253,215,40)" fg:x="1912" fg:w="16"/><text x="41.5816%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.17%)</title><rect x="41.6775%" y="181" width="0.1729%" height="15" fill="rgb(211,81,21)" fg:x="1928" fg:w="8"/><text x="41.9275%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (36 samples, 0.78%)</title><rect x="41.8504%" y="181" width="0.7782%" height="15" fill="rgb(208,190,38)" fg:x="1936" fg:w="36"/><text x="42.1004%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.04%)</title><rect x="42.6286%" y="181" width="0.0432%" height="15" fill="rgb(235,213,38)" fg:x="1972" fg:w="2"/><text x="42.8786%" y="191.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (11 samples, 0.24%)</title><rect x="42.6719%" y="181" width="0.2378%" height="15" fill="rgb(237,122,38)" fg:x="1974" fg:w="11"/><text x="42.9219%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (11 samples, 0.24%)</title><rect x="42.9096%" y="181" width="0.2378%" height="15" fill="rgb(244,218,35)" fg:x="1985" fg:w="11"/><text x="43.1596%" y="191.50"></text></g><g><title>st-backtester-2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.02%)</title><rect x="43.1474%" y="181" width="0.0216%" height="15" fill="rgb(240,68,47)" fg:x="1996" fg:w="1"/><text x="43.3974%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__open (18 samples, 0.39%)</title><rect x="53.6749%" y="165" width="0.3891%" height="15" fill="rgb(210,16,53)" fg:x="2483" fg:w="18"/><text x="53.9249%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`open (1 samples, 0.02%)</title><rect x="54.0640%" y="165" width="0.0216%" height="15" fill="rgb(235,124,12)" fg:x="2501" fg:w="1"/><text x="54.3140%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (91 samples, 1.97%)</title><rect x="54.0856%" y="165" width="1.9671%" height="15" fill="rgb(224,169,11)" fg:x="2502" fg:w="91"/><text x="54.3356%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (80 samples, 1.73%)</title><rect x="54.3234%" y="149" width="1.7294%" height="15" fill="rgb(250,166,2)" fg:x="2513" fg:w="80"/><text x="54.5734%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (75 samples, 1.62%)</title><rect x="54.4315%" y="133" width="1.6213%" height="15" fill="rgb(242,216,29)" fg:x="2518" fg:w="75"/><text x="54.6815%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (39 samples, 0.84%)</title><rect x="55.2097%" y="117" width="0.8431%" height="15" fill="rgb(230,116,27)" fg:x="2554" fg:w="39"/><text x="55.4597%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (2 samples, 0.04%)</title><rect x="56.0527%" y="165" width="0.0432%" height="15" fill="rgb(228,99,48)" fg:x="2593" fg:w="2"/><text x="56.3027%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.04%)</title><rect x="56.0960%" y="165" width="0.0432%" height="15" fill="rgb(253,11,6)" fg:x="2595" fg:w="2"/><text x="56.3460%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (48 samples, 1.04%)</title><rect x="56.6796%" y="149" width="1.0376%" height="15" fill="rgb(247,143,39)" fg:x="2622" fg:w="48"/><text x="56.9296%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (78 samples, 1.69%)</title><rect x="56.1392%" y="165" width="1.6861%" height="15" fill="rgb(236,97,10)" fg:x="2597" fg:w="78"/><text x="56.3892%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.11%)</title><rect x="57.7173%" y="149" width="0.1081%" height="15" fill="rgb(233,208,19)" fg:x="2670" fg:w="5"/><text x="57.9673%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.06%)</title><rect x="57.8253%" y="165" width="0.0649%" height="15" fill="rgb(216,164,2)" fg:x="2675" fg:w="3"/><text x="58.0753%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (8 samples, 0.17%)</title><rect x="57.8902%" y="165" width="0.1729%" height="15" fill="rgb(220,129,5)" fg:x="2678" fg:w="8"/><text x="58.1402%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (56 samples, 1.21%)</title><rect x="58.0631%" y="165" width="1.2105%" height="15" fill="rgb(242,17,10)" fg:x="2686" fg:w="56"/><text x="58.3131%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="59.2737%" y="165" width="0.0216%" height="15" fill="rgb(242,107,0)" fg:x="2742" fg:w="1"/><text x="59.5237%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (1 samples, 0.02%)</title><rect x="59.2953%" y="165" width="0.0216%" height="15" fill="rgb(251,28,31)" fg:x="2743" fg:w="1"/><text x="59.5453%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.15%)</title><rect x="59.3169%" y="165" width="0.1513%" height="15" fill="rgb(233,223,10)" fg:x="2744" fg:w="7"/><text x="59.5669%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (34 samples, 0.73%)</title><rect x="60.0519%" y="149" width="0.7350%" height="15" fill="rgb(215,21,27)" fg:x="2778" fg:w="34"/><text x="60.3019%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (24 samples, 0.52%)</title><rect x="60.2681%" y="133" width="0.5188%" height="15" fill="rgb(232,23,21)" fg:x="2788" fg:w="24"/><text x="60.5181%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (23 samples, 0.50%)</title><rect x="60.2897%" y="117" width="0.4972%" height="15" fill="rgb(244,5,23)" fg:x="2789" fg:w="23"/><text x="60.5397%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (13 samples, 0.28%)</title><rect x="60.5058%" y="101" width="0.2810%" height="15" fill="rgb(226,81,46)" fg:x="2799" fg:w="13"/><text x="60.7558%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="60.7869%" y="149" width="0.0216%" height="15" fill="rgb(247,70,30)" fg:x="2812" fg:w="1"/><text x="61.0369%" y="159.50"></text></g><g><title>st-backtester-2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (101 samples, 2.18%)</title><rect x="59.4682%" y="165" width="2.1833%" height="15" fill="rgb(212,68,19)" fg:x="2751" fg:w="101"/><text x="59.7182%" y="175.50">s..</text></g><g><title>st-backtester-2`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.84%)</title><rect x="60.8085%" y="149" width="0.8431%" height="15" fill="rgb(240,187,13)" fg:x="2813" fg:w="39"/><text x="61.0585%" y="159.50"></text></g><g><title>st-backtester-2`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="61.6515%" y="165" width="0.0216%" height="15" fill="rgb(223,113,26)" fg:x="2852" fg:w="1"/><text x="61.9015%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="61.6732%" y="149" width="0.0432%" height="15" fill="rgb(206,192,2)" fg:x="2853" fg:w="2"/><text x="61.9232%" y="159.50"></text></g><g><title>st-backtester-2`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.24%)</title><rect x="61.6732%" y="165" width="0.2378%" height="15" fill="rgb(241,108,4)" fg:x="2853" fg:w="11"/><text x="61.9232%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (9 samples, 0.19%)</title><rect x="61.7164%" y="149" width="0.1946%" height="15" fill="rgb(247,173,49)" fg:x="2855" fg:w="9"/><text x="61.9664%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (8 samples, 0.17%)</title><rect x="61.7380%" y="133" width="0.1729%" height="15" fill="rgb(224,114,35)" fg:x="2856" fg:w="8"/><text x="61.9880%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (8 samples, 0.17%)</title><rect x="61.7380%" y="117" width="0.1729%" height="15" fill="rgb(245,159,27)" fg:x="2856" fg:w="8"/><text x="61.9880%" y="127.50"></text></g><g><title>st-backtester-2`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="61.9109%" y="165" width="0.0216%" height="15" fill="rgb(245,172,44)" fg:x="2864" fg:w="1"/><text x="62.1609%" y="175.50"></text></g><g><title>st-backtester-2`DYLD-STUB$$malloc (2 samples, 0.04%)</title><rect x="61.9326%" y="165" width="0.0432%" height="15" fill="rgb(236,23,11)" fg:x="2865" fg:w="2"/><text x="62.1826%" y="175.50"></text></g><g><title>st-backtester-2`DYLD-STUB$$memcpy (2 samples, 0.04%)</title><rect x="61.9758%" y="165" width="0.0432%" height="15" fill="rgb(205,117,38)" fg:x="2867" fg:w="2"/><text x="62.2258%" y="175.50"></text></g><g><title>st-backtester-2`&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="62.3217%" y="149" width="0.0216%" height="15" fill="rgb(237,72,25)" fg:x="2883" fg:w="1"/><text x="62.5717%" y="159.50"></text></g><g><title>st-backtester-2`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.06%)</title><rect x="62.3433%" y="149" width="0.0649%" height="15" fill="rgb(244,70,9)" fg:x="2884" fg:w="3"/><text x="62.5933%" y="159.50"></text></g><g><title>st-backtester-2`core::fmt::Formatter::pad (3 samples, 0.06%)</title><rect x="62.4081%" y="149" width="0.0649%" height="15" fill="rgb(217,125,39)" fg:x="2887" fg:w="3"/><text x="62.6581%" y="159.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (2 samples, 0.04%)</title><rect x="62.7324%" y="133" width="0.0432%" height="15" fill="rgb(235,36,10)" fg:x="2902" fg:w="2"/><text x="62.9824%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="62.7756%" y="133" width="0.0432%" height="15" fill="rgb(251,123,47)" fg:x="2904" fg:w="2"/><text x="63.0256%" y="143.50"></text></g><g><title>st-backtester-2`&lt;&amp;T as core::fmt::Display&gt;::fmt (4 samples, 0.09%)</title><rect x="62.8188%" y="133" width="0.0865%" height="15" fill="rgb(221,13,13)" fg:x="2906" fg:w="4"/><text x="63.0688%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (22 samples, 0.48%)</title><rect x="63.4241%" y="117" width="0.4756%" height="15" fill="rgb(238,131,9)" fg:x="2934" fg:w="22"/><text x="63.6741%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.04%)</title><rect x="64.2672%" y="101" width="0.0432%" height="15" fill="rgb(211,50,8)" fg:x="2973" fg:w="2"/><text x="64.5172%" y="111.50"></text></g><g><title>st-backtester-2`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="64.3104%" y="101" width="0.0216%" height="15" fill="rgb(245,182,24)" fg:x="2975" fg:w="1"/><text x="64.5604%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="64.7860%" y="69" width="0.0216%" height="15" fill="rgb(242,14,37)" fg:x="2997" fg:w="1"/><text x="65.0360%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (48 samples, 1.04%)</title><rect x="65.7155%" y="37" width="1.0376%" height="15" fill="rgb(246,228,12)" fg:x="3040" fg:w="48"/><text x="65.9655%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (85 samples, 1.84%)</title><rect x="64.9373%" y="53" width="1.8374%" height="15" fill="rgb(213,55,15)" fg:x="3004" fg:w="85"/><text x="65.1873%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="66.7531%" y="37" width="0.0216%" height="15" fill="rgb(209,9,3)" fg:x="3088" fg:w="1"/><text x="67.0031%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (107 samples, 2.31%)</title><rect x="64.4834%" y="85" width="2.3130%" height="15" fill="rgb(230,59,30)" fg:x="2983" fg:w="107"/><text x="64.7334%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (92 samples, 1.99%)</title><rect x="64.8076%" y="69" width="1.9888%" height="15" fill="rgb(209,121,21)" fg:x="2998" fg:w="92"/><text x="65.0576%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="66.7748%" y="53" width="0.0216%" height="15" fill="rgb(220,109,13)" fg:x="3089" fg:w="1"/><text x="67.0248%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.09%)</title><rect x="66.7964%" y="85" width="0.0865%" height="15" fill="rgb(232,18,1)" fg:x="3090" fg:w="4"/><text x="67.0464%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.06%)</title><rect x="66.8828%" y="85" width="0.0649%" height="15" fill="rgb(215,41,42)" fg:x="3094" fg:w="3"/><text x="67.1328%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.04%)</title><rect x="67.2071%" y="69" width="0.0432%" height="15" fill="rgb(224,123,36)" fg:x="3109" fg:w="2"/><text x="67.4571%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (43 samples, 0.93%)</title><rect x="67.4449%" y="53" width="0.9295%" height="15" fill="rgb(240,125,3)" fg:x="3120" fg:w="43"/><text x="67.6949%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (59 samples, 1.28%)</title><rect x="67.2503%" y="69" width="1.2754%" height="15" fill="rgb(205,98,50)" fg:x="3111" fg:w="59"/><text x="67.5003%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.15%)</title><rect x="68.3744%" y="53" width="0.1513%" height="15" fill="rgb(205,185,37)" fg:x="3163" fg:w="7"/><text x="68.6244%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (33 samples, 0.71%)</title><rect x="68.5257%" y="69" width="0.7134%" height="15" fill="rgb(238,207,15)" fg:x="3170" fg:w="33"/><text x="68.7757%" y="79.50"></text></g><g><title>st-backtester-2`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (250 samples, 5.40%)</title><rect x="63.8997%" y="117" width="5.4042%" height="15" fill="rgb(213,199,42)" fg:x="2956" fg:w="250"/><text x="64.1497%" y="127.50">st-back..</text></g><g><title>st-backtester-2`alloc::raw_vec::finish_grow (230 samples, 4.97%)</title><rect x="64.3320%" y="101" width="4.9719%" height="15" fill="rgb(235,201,11)" fg:x="2976" fg:w="230"/><text x="64.5820%" y="111.50">st-bac..</text></g><g><title>libsystem_malloc.dylib`realloc (109 samples, 2.36%)</title><rect x="66.9477%" y="85" width="2.3562%" height="15" fill="rgb(207,46,11)" fg:x="3097" fg:w="109"/><text x="67.1977%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.06%)</title><rect x="69.2391%" y="69" width="0.0649%" height="15" fill="rgb(241,35,35)" fg:x="3203" fg:w="3"/><text x="69.4891%" y="79.50"></text></g><g><title>st-backtester-2`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (298 samples, 6.44%)</title><rect x="62.9053%" y="133" width="6.4419%" height="15" fill="rgb(243,32,47)" fg:x="2910" fg:w="298"/><text x="63.1553%" y="143.50">st-backt..</text></g><g><title>st-backtester-2`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="69.3039%" y="117" width="0.0432%" height="15" fill="rgb(247,202,23)" fg:x="3206" fg:w="2"/><text x="69.5539%" y="127.50"></text></g><g><title>st-backtester-2`&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="69.3472%" y="133" width="0.0216%" height="15" fill="rgb(219,102,11)" fg:x="3208" fg:w="1"/><text x="69.5972%" y="143.50"></text></g><g><title>st-backtester-2`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.09%)</title><rect x="69.3688%" y="133" width="0.0865%" height="15" fill="rgb(243,110,44)" fg:x="3209" fg:w="4"/><text x="69.6188%" y="143.50"></text></g><g><title>st-backtester-2`alloc::fmt::format::format_inner (354 samples, 7.65%)</title><rect x="62.0190%" y="165" width="7.6524%" height="15" fill="rgb(222,74,54)" fg:x="2869" fg:w="354"/><text x="62.2690%" y="175.50">st-backtes..</text></g><g><title>st-backtester-2`core::fmt::write (333 samples, 7.20%)</title><rect x="62.4730%" y="149" width="7.1984%" height="15" fill="rgb(216,99,12)" fg:x="2890" fg:w="333"/><text x="62.7230%" y="159.50">st-backtes..</text></g><g><title>st-backtester-2`core::fmt::Formatter::pad (10 samples, 0.22%)</title><rect x="69.4553%" y="133" width="0.2162%" height="15" fill="rgb(226,22,26)" fg:x="3213" fg:w="10"/><text x="69.7053%" y="143.50"></text></g><g><title>st-backtester-2`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.04%)</title><rect x="69.6714%" y="165" width="0.0432%" height="15" fill="rgb(217,163,10)" fg:x="3223" fg:w="2"/><text x="69.9214%" y="175.50"></text></g><g><title>st-backtester-2`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="69.6714%" y="149" width="0.0432%" height="15" fill="rgb(213,25,53)" fg:x="3223" fg:w="2"/><text x="69.9214%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.04%)</title><rect x="69.6714%" y="133" width="0.0432%" height="15" fill="rgb(252,105,26)" fg:x="3223" fg:w="2"/><text x="69.9214%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.04%)</title><rect x="69.6714%" y="117" width="0.0432%" height="15" fill="rgb(220,39,43)" fg:x="3223" fg:w="2"/><text x="69.9214%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.04%)</title><rect x="69.6714%" y="101" width="0.0432%" height="15" fill="rgb(229,68,48)" fg:x="3223" fg:w="2"/><text x="69.9214%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 0.04%)</title><rect x="69.6714%" y="85" width="0.0432%" height="15" fill="rgb(252,8,32)" fg:x="3223" fg:w="2"/><text x="69.9214%" y="95.50"></text></g><g><title>st-backtester-2`core::fmt::write (1 samples, 0.02%)</title><rect x="69.7147%" y="165" width="0.0216%" height="15" fill="rgb(223,20,43)" fg:x="3225" fg:w="1"/><text x="69.9647%" y="175.50"></text></g><g><title>st-backtester-2`core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="69.7363%" y="165" width="0.0216%" height="15" fill="rgb(229,81,49)" fg:x="3226" fg:w="1"/><text x="69.9863%" y="175.50"></text></g><g><title>st-backtester-2`core::ptr::drop_in_place&lt;(alloc::string::String,crossbeam_channel::channel::Receiver&lt;alloc::vec::Vec&lt;st_backtester_2::database::models::candlestick::Candlestick&gt;&gt;)&gt; (2 samples, 0.04%)</title><rect x="69.7579%" y="165" width="0.0432%" height="15" fill="rgb(236,28,36)" fg:x="3227" fg:w="2"/><text x="70.0079%" y="175.50"></text></g><g><title>st-backtester-2`&lt;crossbeam_channel::channel::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="69.7579%" y="149" width="0.0432%" height="15" fill="rgb(249,185,26)" fg:x="3227" fg:w="2"/><text x="70.0079%" y="159.50"></text></g><g><title>st-backtester-2`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;crossbeam_channel::counter::Counter&lt;crossbeam_channel::flavors::list::Channel&lt;alloc::vec::Vec&lt;st_backtester_2::database::models::candlestick::Candlestick&gt;&gt;&gt;&gt;&gt; (2 samples, 0.04%)</title><rect x="69.7579%" y="133" width="0.0432%" height="15" fill="rgb(249,174,33)" fg:x="3227" fg:w="2"/><text x="70.0079%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="69.7795%" y="117" width="0.0216%" height="15" fill="rgb(233,201,37)" fg:x="3228" fg:w="1"/><text x="70.0295%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="69.7795%" y="101" width="0.0216%" height="15" fill="rgb(221,78,26)" fg:x="3228" fg:w="1"/><text x="70.0295%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (1 samples, 0.02%)</title><rect x="69.7795%" y="85" width="0.0216%" height="15" fill="rgb(250,127,30)" fg:x="3228" fg:w="1"/><text x="70.0295%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="69.7795%" y="69" width="0.0216%" height="15" fill="rgb(230,49,44)" fg:x="3228" fg:w="1"/><text x="70.0295%" y="79.50"></text></g><g><title>st-backtester-2`core::str::pattern::StrSearcher::new (6 samples, 0.13%)</title><rect x="69.8011%" y="165" width="0.1297%" height="15" fill="rgb(229,67,23)" fg:x="3229" fg:w="6"/><text x="70.0511%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (3 samples, 0.06%)</title><rect x="69.8660%" y="149" width="0.0649%" height="15" fill="rgb(249,83,47)" fg:x="3232" fg:w="3"/><text x="70.1160%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (3 samples, 0.06%)</title><rect x="70.5793%" y="149" width="0.0649%" height="15" fill="rgb(215,43,3)" fg:x="3265" fg:w="3"/><text x="70.8293%" y="159.50"></text></g><g><title>st-backtester-2`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="70.6442%" y="149" width="0.0432%" height="15" fill="rgb(238,154,13)" fg:x="3268" fg:w="2"/><text x="70.8942%" y="159.50"></text></g><g><title>st-backtester-2`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (54 samples, 1.17%)</title><rect x="69.9308%" y="165" width="1.1673%" height="15" fill="rgb(219,56,2)" fg:x="3235" fg:w="54"/><text x="70.1808%" y="175.50"></text></g><g><title>st-backtester-2`core::hash::BuildHasher::hash_one (19 samples, 0.41%)</title><rect x="70.6874%" y="149" width="0.4107%" height="15" fill="rgb(233,0,4)" fg:x="3270" fg:w="19"/><text x="70.9374%" y="159.50"></text></g><g><title>st-backtester-2`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.17%)</title><rect x="70.9252%" y="133" width="0.1729%" height="15" fill="rgb(235,30,7)" fg:x="3281" fg:w="8"/><text x="71.1752%" y="143.50"></text></g><g><title>st-backtester-2`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.04%)</title><rect x="71.0981%" y="165" width="0.0432%" height="15" fill="rgb(250,79,13)" fg:x="3289" fg:w="2"/><text x="71.3481%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="71.1198%" y="149" width="0.0216%" height="15" fill="rgb(211,146,34)" fg:x="3290" fg:w="1"/><text x="71.3698%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="71.1198%" y="133" width="0.0216%" height="15" fill="rgb(228,22,38)" fg:x="3290" fg:w="1"/><text x="71.3698%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (1 samples, 0.02%)</title><rect x="71.1198%" y="117" width="0.0216%" height="15" fill="rgb(235,168,5)" fg:x="3290" fg:w="1"/><text x="71.3698%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (94 samples, 2.03%)</title><rect x="75.6809%" y="101" width="2.0320%" height="15" fill="rgb(221,155,16)" fg:x="3501" fg:w="94"/><text x="75.9309%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (184 samples, 3.98%)</title><rect x="73.7570%" y="117" width="3.9775%" height="15" fill="rgb(215,215,53)" fg:x="3412" fg:w="184"/><text x="74.0070%" y="127.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="77.7129%" y="101" width="0.0216%" height="15" fill="rgb(223,4,10)" fg:x="3595" fg:w="1"/><text x="77.9629%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (222 samples, 4.80%)</title><rect x="72.9788%" y="149" width="4.7990%" height="15" fill="rgb(234,103,6)" fg:x="3376" fg:w="222"/><text x="73.2288%" y="159.50">libsys..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (192 samples, 4.15%)</title><rect x="73.6273%" y="133" width="4.1505%" height="15" fill="rgb(227,97,0)" fg:x="3406" fg:w="192"/><text x="73.8773%" y="143.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="77.7345%" y="117" width="0.0432%" height="15" fill="rgb(234,150,53)" fg:x="3596" fg:w="2"/><text x="77.9845%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.13%)</title><rect x="77.7778%" y="149" width="0.1297%" height="15" fill="rgb(228,201,54)" fg:x="3598" fg:w="6"/><text x="78.0278%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (89 samples, 1.92%)</title><rect x="78.5560%" y="133" width="1.9239%" height="15" fill="rgb(222,22,37)" fg:x="3634" fg:w="89"/><text x="78.8060%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`free (123 samples, 2.66%)</title><rect x="77.9075%" y="149" width="2.6589%" height="15" fill="rgb(237,53,32)" fg:x="3604" fg:w="123"/><text x="78.1575%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.09%)</title><rect x="80.4799%" y="133" width="0.0865%" height="15" fill="rgb(233,25,53)" fg:x="3723" fg:w="4"/><text x="80.7299%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.04%)</title><rect x="80.5664%" y="149" width="0.0432%" height="15" fill="rgb(210,40,34)" fg:x="3727" fg:w="2"/><text x="80.8164%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (12 samples, 0.26%)</title><rect x="80.6096%" y="149" width="0.2594%" height="15" fill="rgb(241,220,44)" fg:x="3729" fg:w="12"/><text x="80.8596%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (104 samples, 2.25%)</title><rect x="80.8690%" y="149" width="2.2482%" height="15" fill="rgb(235,28,35)" fg:x="3741" fg:w="104"/><text x="81.1190%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="83.1172%" y="149" width="0.0216%" height="15" fill="rgb(210,56,17)" fg:x="3845" fg:w="1"/><text x="83.3672%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.06%)</title><rect x="83.1388%" y="149" width="0.0649%" height="15" fill="rgb(224,130,29)" fg:x="3846" fg:w="3"/><text x="83.3888%" y="159.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (2 samples, 0.04%)</title><rect x="83.2036%" y="149" width="0.0432%" height="15" fill="rgb(235,212,8)" fg:x="3849" fg:w="2"/><text x="83.4536%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (18 samples, 0.39%)</title><rect x="83.2469%" y="149" width="0.3891%" height="15" fill="rgb(223,33,50)" fg:x="3851" fg:w="18"/><text x="83.4969%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (52 samples, 1.12%)</title><rect x="84.9762%" y="101" width="1.1241%" height="15" fill="rgb(219,149,13)" fg:x="3931" fg:w="52"/><text x="85.2262%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (28 samples, 0.61%)</title><rect x="85.4950%" y="85" width="0.6053%" height="15" fill="rgb(250,156,29)" fg:x="3955" fg:w="28"/><text x="85.7450%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (62 samples, 1.34%)</title><rect x="84.8033%" y="133" width="1.3403%" height="15" fill="rgb(216,193,19)" fg:x="3923" fg:w="62"/><text x="85.0533%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (57 samples, 1.23%)</title><rect x="84.9114%" y="117" width="1.2322%" height="15" fill="rgb(216,135,14)" fg:x="3928" fg:w="57"/><text x="85.1614%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (2 samples, 0.04%)</title><rect x="86.1003%" y="101" width="0.0432%" height="15" fill="rgb(241,47,5)" fg:x="3983" fg:w="2"/><text x="86.3503%" y="111.50"></text></g><g><title>st-backtester-2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (165 samples, 3.57%)</title><rect x="83.6360%" y="149" width="3.5668%" height="15" fill="rgb(233,42,35)" fg:x="3869" fg:w="165"/><text x="83.8860%" y="159.50">st-b..</text></g><g><title>st-backtester-2`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 1.06%)</title><rect x="86.1435%" y="133" width="1.0592%" height="15" fill="rgb(231,13,6)" fg:x="3985" fg:w="49"/><text x="86.3935%" y="143.50"></text></g><g><title>st-backtester-2`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="87.2028%" y="149" width="0.0649%" height="15" fill="rgb(207,181,40)" fg:x="4034" fg:w="3"/><text x="87.4528%" y="159.50"></text></g><g><title>st-backtester-2`&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.09%)</title><rect x="87.2676%" y="149" width="0.0865%" height="15" fill="rgb(254,173,49)" fg:x="4037" fg:w="4"/><text x="87.5176%" y="159.50"></text></g><g><title>st-backtester-2`core::hash::BuildHasher::hash_one (35 samples, 0.76%)</title><rect x="87.3541%" y="149" width="0.7566%" height="15" fill="rgb(221,1,38)" fg:x="4041" fg:w="35"/><text x="87.6041%" y="159.50"></text></g><g><title>st-backtester-2`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.37%)</title><rect x="87.7432%" y="133" width="0.3675%" height="15" fill="rgb(206,124,46)" fg:x="4059" fg:w="17"/><text x="87.9932%" y="143.50"></text></g><g><title>st-backtester-2`core::str::pattern::StrSearcher::new (14 samples, 0.30%)</title><rect x="88.1107%" y="149" width="0.3026%" height="15" fill="rgb(249,21,11)" fg:x="4076" fg:w="14"/><text x="88.3607%" y="159.50"></text></g><g><title>st-backtester-2`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="88.5863%" y="133" width="0.0216%" height="15" fill="rgb(222,201,40)" fg:x="4098" fg:w="1"/><text x="88.8363%" y="143.50"></text></g><g><title>st-backtester-2`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (25 samples, 0.54%)</title><rect x="88.4133%" y="149" width="0.5404%" height="15" fill="rgb(235,61,29)" fg:x="4090" fg:w="25"/><text x="88.6633%" y="159.50"></text></g><g><title>st-backtester-2`core::hash::BuildHasher::hash_one (16 samples, 0.35%)</title><rect x="88.6079%" y="133" width="0.3459%" height="15" fill="rgb(219,207,3)" fg:x="4099" fg:w="16"/><text x="88.8579%" y="143.50"></text></g><g><title>st-backtester-2`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.19%)</title><rect x="88.7592%" y="117" width="0.1946%" height="15" fill="rgb(222,56,46)" fg:x="4106" fg:w="9"/><text x="89.0092%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.09%)</title><rect x="89.1051%" y="117" width="0.0865%" height="15" fill="rgb(239,76,54)" fg:x="4122" fg:w="4"/><text x="89.3551%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (2 samples, 0.04%)</title><rect x="89.9049%" y="85" width="0.0432%" height="15" fill="rgb(231,124,27)" fg:x="4159" fg:w="2"/><text x="90.1549%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (12 samples, 0.26%)</title><rect x="89.9481%" y="85" width="0.2594%" height="15" fill="rgb(249,195,6)" fg:x="4161" fg:w="12"/><text x="90.1981%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.11%)</title><rect x="90.2075%" y="85" width="0.1081%" height="15" fill="rgb(237,174,47)" fg:x="4173" fg:w="5"/><text x="90.4575%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (69 samples, 1.49%)</title><rect x="89.0834%" y="133" width="1.4916%" height="15" fill="rgb(206,201,31)" fg:x="4121" fg:w="69"/><text x="89.3334%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (64 samples, 1.38%)</title><rect x="89.1915%" y="117" width="1.3835%" height="15" fill="rgb(231,57,52)" fg:x="4126" fg:w="64"/><text x="89.4415%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (63 samples, 1.36%)</title><rect x="89.2131%" y="101" width="1.3619%" height="15" fill="rgb(248,177,22)" fg:x="4127" fg:w="63"/><text x="89.4631%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.26%)</title><rect x="90.3156%" y="85" width="0.2594%" height="15" fill="rgb(215,211,37)" fg:x="4178" fg:w="12"/><text x="90.5656%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.04%)</title><rect x="90.5318%" y="69" width="0.0432%" height="15" fill="rgb(241,128,51)" fg:x="4188" fg:w="2"/><text x="90.7818%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.02%)</title><rect x="90.5750%" y="133" width="0.0216%" height="15" fill="rgb(227,165,31)" fg:x="4190" fg:w="1"/><text x="90.8250%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (4 samples, 0.09%)</title><rect x="90.5966%" y="133" width="0.0865%" height="15" fill="rgb(228,167,24)" fg:x="4191" fg:w="4"/><text x="90.8466%" y="143.50"></text></g><g><title>st-backtester-2`st_backtester_2::database::models::bar::Bar::add_candlestick (905 samples, 19.56%)</title><rect x="71.1414%" y="165" width="19.5633%" height="15" fill="rgb(228,143,12)" fg:x="3291" fg:w="905"/><text x="71.3914%" y="175.50">st-backtester-2`st_backtester_2..</text></g><g><title>st-backtester-2`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (81 samples, 1.75%)</title><rect x="88.9537%" y="149" width="1.7510%" height="15" fill="rgb(249,149,8)" fg:x="4115" fg:w="81"/><text x="89.2037%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="90.6831%" y="133" width="0.0216%" height="15" fill="rgb(243,35,44)" fg:x="4195" fg:w="1"/><text x="90.9331%" y="143.50"></text></g><g><title>st-backtester-2`&lt;st_backtester_2::database::tasks::query::QueryTask as st_backtester_2::database::tasks::Task&gt;::execute (2,203 samples, 47.62%)</title><rect x="43.1690%" y="181" width="47.6221%" height="15" fill="rgb(246,89,9)" fg:x="1997" fg:w="2203"/><text x="43.4190%" y="191.50">st-backtester-2`&lt;st_backtester_2::database::tasks::query::QueryTask as st_back..</text></g><g><title>st-backtester-2`std::io::stdio::_print (4 samples, 0.09%)</title><rect x="90.7047%" y="165" width="0.0865%" height="15" fill="rgb(233,213,13)" fg:x="4196" fg:w="4"/><text x="90.9547%" y="175.50"></text></g><g><title>st-backtester-2`core::fmt::write (4 samples, 0.09%)</title><rect x="90.7047%" y="149" width="0.0865%" height="15" fill="rgb(233,141,41)" fg:x="4196" fg:w="4"/><text x="90.9547%" y="159.50"></text></g><g><title>st-backtester-2`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (4 samples, 0.09%)</title><rect x="90.7047%" y="133" width="0.0865%" height="15" fill="rgb(239,167,4)" fg:x="4196" fg:w="4"/><text x="90.9547%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (4 samples, 0.09%)</title><rect x="90.7047%" y="117" width="0.0865%" height="15" fill="rgb(209,217,16)" fg:x="4196" fg:w="4"/><text x="90.9547%" y="127.50"></text></g><g><title>st-backtester-2`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (131 samples, 2.83%)</title><rect x="90.7912%" y="181" width="2.8318%" height="15" fill="rgb(219,88,35)" fg:x="4200" fg:w="131"/><text x="91.0412%" y="191.50">st..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (37 samples, 0.80%)</title><rect x="92.8232%" y="165" width="0.7998%" height="15" fill="rgb(220,193,23)" fg:x="4294" fg:w="37"/><text x="93.0732%" y="175.50"></text></g><g><title>st-backtester-2`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="93.6230%" y="181" width="0.0216%" height="15" fill="rgb(230,90,52)" fg:x="4331" fg:w="1"/><text x="93.8730%" y="191.50"></text></g><g><title>st-backtester-2`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="93.6446%" y="181" width="0.0216%" height="15" fill="rgb(252,106,19)" fg:x="4332" fg:w="1"/><text x="93.8946%" y="191.50"></text></g><g><title>st-backtester-2`DYLD-STUB$$memcpy (8 samples, 0.17%)</title><rect x="93.6662%" y="181" width="0.1729%" height="15" fill="rgb(206,74,20)" fg:x="4333" fg:w="8"/><text x="93.9162%" y="191.50"></text></g><g><title>st-backtester-2`alloc::fmt::format::format_inner (3 samples, 0.06%)</title><rect x="93.8392%" y="181" width="0.0649%" height="15" fill="rgb(230,138,44)" fg:x="4341" fg:w="3"/><text x="94.0892%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="94.2499%" y="165" width="0.0432%" height="15" fill="rgb(235,182,43)" fg:x="4360" fg:w="2"/><text x="94.4999%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="94.2931%" y="165" width="0.0216%" height="15" fill="rgb(242,16,51)" fg:x="4362" fg:w="1"/><text x="94.5431%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="94.6822%" y="133" width="0.0432%" height="15" fill="rgb(248,9,4)" fg:x="4380" fg:w="2"/><text x="94.9322%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (53 samples, 1.15%)</title><rect x="94.5741%" y="149" width="1.1457%" height="15" fill="rgb(210,31,22)" fg:x="4375" fg:w="53"/><text x="94.8241%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (46 samples, 0.99%)</title><rect x="94.7255%" y="133" width="0.9944%" height="15" fill="rgb(239,54,39)" fg:x="4382" fg:w="46"/><text x="94.9755%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (43 samples, 0.93%)</title><rect x="94.7903%" y="117" width="0.9295%" height="15" fill="rgb(230,99,41)" fg:x="4385" fg:w="43"/><text x="95.0403%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (21 samples, 0.45%)</title><rect x="95.2659%" y="101" width="0.4540%" height="15" fill="rgb(253,106,12)" fg:x="4407" fg:w="21"/><text x="95.5159%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (2 samples, 0.04%)</title><rect x="95.7198%" y="149" width="0.0432%" height="15" fill="rgb(213,46,41)" fg:x="4428" fg:w="2"/><text x="95.9698%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.04%)</title><rect x="95.7631%" y="149" width="0.0432%" height="15" fill="rgb(215,133,35)" fg:x="4430" fg:w="2"/><text x="96.0131%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.06%)</title><rect x="95.8063%" y="149" width="0.0649%" height="15" fill="rgb(213,28,5)" fg:x="4432" fg:w="3"/><text x="96.0563%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.04%)</title><rect x="96.0441%" y="133" width="0.0432%" height="15" fill="rgb(215,77,49)" fg:x="4443" fg:w="2"/><text x="96.2941%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (20 samples, 0.43%)</title><rect x="96.1954%" y="117" width="0.4323%" height="15" fill="rgb(248,100,22)" fg:x="4450" fg:w="20"/><text x="96.4454%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (2 samples, 0.04%)</title><rect x="96.7575%" y="101" width="0.0432%" height="15" fill="rgb(208,67,9)" fg:x="4476" fg:w="2"/><text x="97.0075%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free (3 samples, 0.06%)</title><rect x="96.8007%" y="101" width="0.0649%" height="15" fill="rgb(219,133,21)" fg:x="4478" fg:w="3"/><text x="97.0507%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_to_block (21 samples, 0.45%)</title><rect x="96.8655%" y="101" width="0.4540%" height="15" fill="rgb(246,46,29)" fg:x="4481" fg:w="21"/><text x="97.1155%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (27 samples, 0.58%)</title><rect x="97.3195%" y="101" width="0.5837%" height="15" fill="rgb(246,185,52)" fg:x="4502" fg:w="27"/><text x="97.5695%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate (24 samples, 0.52%)</title><rect x="97.3843%" y="85" width="0.5188%" height="15" fill="rgb(252,136,11)" fg:x="4505" fg:w="24"/><text x="97.6343%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (15 samples, 0.32%)</title><rect x="97.5789%" y="69" width="0.3243%" height="15" fill="rgb(219,138,53)" fg:x="4514" fg:w="15"/><text x="97.8289%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (8 samples, 0.17%)</title><rect x="97.9032%" y="101" width="0.1729%" height="15" fill="rgb(211,51,23)" fg:x="4529" fg:w="8"/><text x="98.1532%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.0761%" y="101" width="0.0216%" height="15" fill="rgb(247,221,28)" fg:x="4537" fg:w="1"/><text x="98.3261%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.0761%" y="85" width="0.0216%" height="15" fill="rgb(251,222,45)" fg:x="4537" fg:w="1"/><text x="98.3261%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="98.0761%" y="69" width="0.0216%" height="15" fill="rgb(217,162,53)" fg:x="4537" fg:w="1"/><text x="98.3261%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (77 samples, 1.66%)</title><rect x="96.6278%" y="117" width="1.6645%" height="15" fill="rgb(229,93,14)" fg:x="4470" fg:w="77"/><text x="96.8778%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.19%)</title><rect x="98.0977%" y="101" width="0.1946%" height="15" fill="rgb(209,67,49)" fg:x="4538" fg:w="9"/><text x="98.3477%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.04%)</title><rect x="98.3139%" y="101" width="0.0432%" height="15" fill="rgb(213,87,29)" fg:x="4548" fg:w="2"/><text x="98.5639%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.04%)</title><rect x="98.3139%" y="85" width="0.0432%" height="15" fill="rgb(205,151,52)" fg:x="4548" fg:w="2"/><text x="98.5639%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (5 samples, 0.11%)</title><rect x="98.3571%" y="85" width="0.1081%" height="15" fill="rgb(253,215,39)" fg:x="4550" fg:w="5"/><text x="98.6071%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (5 samples, 0.11%)</title><rect x="98.3571%" y="69" width="0.1081%" height="15" fill="rgb(221,220,41)" fg:x="4550" fg:w="5"/><text x="98.6071%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (5 samples, 0.11%)</title><rect x="98.3571%" y="53" width="0.1081%" height="15" fill="rgb(218,133,21)" fg:x="4550" fg:w="5"/><text x="98.6071%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.4652%" y="85" width="0.0216%" height="15" fill="rgb(221,193,43)" fg:x="4555" fg:w="1"/><text x="98.7152%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="98.4652%" y="69" width="0.0216%" height="15" fill="rgb(240,128,52)" fg:x="4555" fg:w="1"/><text x="98.7152%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="98.4652%" y="53" width="0.0216%" height="15" fill="rgb(253,114,12)" fg:x="4555" fg:w="1"/><text x="98.7152%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.15%)</title><rect x="98.3571%" y="101" width="0.1513%" height="15" fill="rgb(215,223,47)" fg:x="4550" fg:w="7"/><text x="98.6071%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.4868%" y="85" width="0.0216%" height="15" fill="rgb(248,225,23)" fg:x="4556" fg:w="1"/><text x="98.7368%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="98.4868%" y="69" width="0.0216%" height="15" fill="rgb(250,108,0)" fg:x="4556" fg:w="1"/><text x="98.7368%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (36 samples, 0.78%)</title><rect x="98.2923%" y="117" width="0.7782%" height="15" fill="rgb(228,208,7)" fg:x="4547" fg:w="36"/><text x="98.5423%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (26 samples, 0.56%)</title><rect x="98.5084%" y="101" width="0.5620%" height="15" fill="rgb(244,45,10)" fg:x="4557" fg:w="26"/><text x="98.7584%" y="111.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.02%)</title><rect x="99.0705%" y="117" width="0.0216%" height="15" fill="rgb(207,125,25)" fg:x="4583" fg:w="1"/><text x="99.3205%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (142 samples, 3.07%)</title><rect x="96.0873%" y="133" width="3.0696%" height="15" fill="rgb(210,195,18)" fg:x="4445" fg:w="142"/><text x="96.3373%" y="143.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.06%)</title><rect x="99.0921%" y="117" width="0.0649%" height="15" fill="rgb(249,80,12)" fg:x="4584" fg:w="3"/><text x="99.3421%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (23 samples, 0.50%)</title><rect x="99.1569%" y="133" width="0.4972%" height="15" fill="rgb(221,65,9)" fg:x="4587" fg:w="23"/><text x="99.4069%" y="143.50"></text></g><g><title>st-backtester-2`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (268 samples, 5.79%)</title><rect x="93.9040%" y="181" width="5.7933%" height="15" fill="rgb(235,49,36)" fg:x="4344" fg:w="268"/><text x="94.1540%" y="191.50">st-back..</text></g><g><title>st-backtester-2`alloc::raw_vec::finish_grow (249 samples, 5.38%)</title><rect x="94.3147%" y="165" width="5.3826%" height="15" fill="rgb(225,32,20)" fg:x="4363" fg:w="249"/><text x="94.5647%" y="175.50">st-back..</text></g><g><title>libsystem_malloc.dylib`realloc (177 samples, 3.83%)</title><rect x="95.8712%" y="149" width="3.8262%" height="15" fill="rgb(215,141,46)" fg:x="4435" fg:w="177"/><text x="96.1212%" y="159.50">libs..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.04%)</title><rect x="99.6541%" y="133" width="0.0432%" height="15" fill="rgb(250,160,47)" fg:x="4610" fg:w="2"/><text x="99.9041%" y="143.50"></text></g><g><title>st-backtester-2`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="99.6974%" y="181" width="0.0432%" height="15" fill="rgb(216,222,40)" fg:x="4612" fg:w="2"/><text x="99.9474%" y="191.50"></text></g><g><title>st-backtester-2`core::fmt::Formatter::pad_integral (2 samples, 0.04%)</title><rect x="99.7406%" y="181" width="0.0432%" height="15" fill="rgb(234,217,39)" fg:x="4614" fg:w="2"/><text x="99.9906%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (2 samples, 0.04%)</title><rect x="99.7838%" y="149" width="0.0432%" height="15" fill="rgb(207,178,40)" fg:x="4616" fg:w="2"/><text x="100.0338%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (2 samples, 0.04%)</title><rect x="99.7838%" y="133" width="0.0432%" height="15" fill="rgb(221,136,13)" fg:x="4616" fg:w="2"/><text x="100.0338%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`write (5 samples, 0.11%)</title><rect x="99.8271%" y="117" width="0.1081%" height="15" fill="rgb(249,199,10)" fg:x="4618" fg:w="5"/><text x="100.0771%" y="127.50"></text></g><g><title>st-backtester-2`core::ops::function::FnOnce::call_once{{vtable.shim}} (8 samples, 0.17%)</title><rect x="99.7838%" y="181" width="0.1729%" height="15" fill="rgb(249,222,13)" fg:x="4616" fg:w="8"/><text x="100.0338%" y="191.50"></text></g><g><title>st-backtester-2`std::io::stdio::_print (8 samples, 0.17%)</title><rect x="99.7838%" y="165" width="0.1729%" height="15" fill="rgb(244,185,38)" fg:x="4616" fg:w="8"/><text x="100.0338%" y="175.50"></text></g><g><title>st-backtester-2`core::fmt::write (6 samples, 0.13%)</title><rect x="99.8271%" y="149" width="0.1297%" height="15" fill="rgb(236,202,9)" fg:x="4618" fg:w="6"/><text x="100.0771%" y="159.50"></text></g><g><title>st-backtester-2`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (6 samples, 0.13%)</title><rect x="99.8271%" y="133" width="0.1297%" height="15" fill="rgb(250,229,37)" fg:x="4618" fg:w="6"/><text x="100.0771%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title><rect x="99.9351%" y="117" width="0.0216%" height="15" fill="rgb(206,174,23)" fg:x="4623" fg:w="1"/><text x="100.1851%" y="127.50"></text></g><g><title>st-backtester-2`core::ops::function::FnOnce::call_once{{vtable.shim}} (2,987 samples, 64.57%)</title><rect x="35.4086%" y="197" width="64.5698%" height="15" fill="rgb(211,33,43)" fg:x="1638" fg:w="2987"/><text x="35.6586%" y="207.50">st-backtester-2`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>st-backtester-2`core::str::pattern::StrSearcher::new (1 samples, 0.02%)</title><rect x="99.9568%" y="181" width="0.0216%" height="15" fill="rgb(245,58,50)" fg:x="4624" fg:w="1"/><text x="100.2068%" y="191.50"></text></g><g><title>all (4,626 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(244,68,36)" fg:x="0" fg:w="4626"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (3,002 samples, 64.89%)</title><rect x="35.1059%" y="277" width="64.8941%" height="15" fill="rgb(232,229,15)" fg:x="1624" fg:w="3002"/><text x="35.3559%" y="287.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (3,002 samples, 64.89%)</title><rect x="35.1059%" y="261" width="64.8941%" height="15" fill="rgb(254,30,23)" fg:x="1624" fg:w="3002"/><text x="35.3559%" y="271.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>st-backtester-2`std::sys::unix::thread::Thread::new::thread_start (3,002 samples, 64.89%)</title><rect x="35.1059%" y="245" width="64.8941%" height="15" fill="rgb(235,160,14)" fg:x="1624" fg:w="3002"/><text x="35.3559%" y="255.50">st-backtester-2`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>st-backtester-2`core::ops::function::FnOnce::call_once{{vtable.shim}} (3,002 samples, 64.89%)</title><rect x="35.1059%" y="229" width="64.8941%" height="15" fill="rgb(212,155,44)" fg:x="1624" fg:w="3002"/><text x="35.3559%" y="239.50">st-backtester-2`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>st-backtester-2`std::sys_common::backtrace::__rust_begin_short_backtrace (3,002 samples, 64.89%)</title><rect x="35.1059%" y="213" width="64.8941%" height="15" fill="rgb(226,2,50)" fg:x="1624" fg:w="3002"/><text x="35.3559%" y="223.50">st-backtester-2`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>st-backtester-2`core::ptr::drop_in_place&lt;st_backtester_2::database::tasks::read_chunk::ReadChunkTask&gt; (1 samples, 0.02%)</title><rect x="99.9784%" y="197" width="0.0216%" height="15" fill="rgb(234,177,6)" fg:x="4625" fg:w="1"/><text x="100.2284%" y="207.50"></text></g><g><title>st-backtester-2`alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.02%)</title><rect x="99.9784%" y="181" width="0.0216%" height="15" fill="rgb(217,24,9)" fg:x="4625" fg:w="1"/><text x="100.2284%" y="191.50"></text></g><g><title>st-backtester-2`&lt;crossbeam_channel::channel::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.9784%" y="165" width="0.0216%" height="15" fill="rgb(220,13,46)" fg:x="4625" fg:w="1"/><text x="100.2284%" y="175.50"></text></g><g><title>st-backtester-2`crossbeam_channel::waker::SyncWaker::disconnect (1 samples, 0.02%)</title><rect x="99.9784%" y="149" width="0.0216%" height="15" fill="rgb(239,221,27)" fg:x="4625" fg:w="1"/><text x="100.2284%" y="159.50"></text></g><g><title>st-backtester-2`std::sys_common::lazy_box::LazyBox&lt;T&gt;::initialize (1 samples, 0.02%)</title><rect x="99.9784%" y="133" width="0.0216%" height="15" fill="rgb(222,198,25)" fg:x="4625" fg:w="1"/><text x="100.2284%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (1 samples, 0.02%)</title><rect x="99.9784%" y="117" width="0.0216%" height="15" fill="rgb(211,99,13)" fg:x="4625" fg:w="1"/><text x="100.2284%" y="127.50"></text></g></svg></svg>